import * as  React from 'react';
import * as Sentry from '@sentry/react'

interface ErrorBoundaryProps { }

interface ErrorBoundaryState {
    hasError: Boolean;
    eventId: string | null;
    error?: Error | null;
    errorInfo?: React.ErrorInfo | null;
}

export class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {
    constructor(props: ErrorBoundaryProps) {
        super(props);
        this.state = {
            hasError: false,
            eventId: null,
            error: null,
            errorInfo: null
        };
    }

    componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {
        // Catch errors in any components below and re-render with error message
        this.setState({
            hasError: true,
            eventId: null,
            error,
            errorInfo
        });
        console.log({ error, errorInfo });
        Sentry.withScope((scope) => {
            scope.setExtras(errorInfo);
            const eventId = Sentry.captureException(error);
            this.setState({ eventId, errorInfo });
        });
        // You can also log error messages to an error reporting service here
    }

    //componentDidCatch(error, errorInfo) {
    //    // Catch errors in any components below and re-render with error message
    //    this.setState({
    //        error: error,
    //        errorInfo: errorInfo
    //    })
    //    // You can also log error messages to an error reporting service here
    //}

    render() {
        if (this.state.hasError) {
            // Error path
            return (
                <div>
                    <h2>Something went wrong.</h2>
                    <details style={{ whiteSpace: 'pre-wrap' }}>
                        {this.state.error && (this.state.error as Error).toString()}
                        <br />
                        {(this.state.errorInfo as React.ErrorInfo).componentStack}
                    </details>
                </div>
            );
        }
        // Normally, just render children
        return this.props.children;
    }
}